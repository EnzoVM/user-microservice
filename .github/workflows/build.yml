name: Build
on:
  pull_request:
    branches:
      - develop
      - main
    types: [opened, synchronize, reopened]

env:
  AWS_APPLICATION_NAME: user-microservice
  AWS_ENVIROMENT_NAME: User-microservice-env2
  AWS_VERSION_LABEL: user-microservice-source
  AWS_REGION: us-east-1
  DOCKER_IMAGE_NAME: user-microservice
  AWS_ECR_LINK: public.ecr.aws/j1n4i3d3/enzovm/user-microservice
  AWS_ECR_PATH: public.ecr.aws/j1n4i3d3

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'main') }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install dependencies
        run: npm ci
      - name: Test and Coverage
        run: npm run test:unit
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Send Notification on Failure
        if: ${{ failure() }}
        uses: teknatha136/actions-google-chat-text-message@v1.0.0
        with:
          google-chat-webhook: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          text-message: 'Error in SonarCloud section in user microservice'

  docker-image-ECR:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Build Docker Image
        run: docker build --no-cache --progress=plain -t ${{ env.DOCKER_IMAGE_NAME }} .
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.AWS_ECR_PATH }}
      - name: Push to ECR
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.AWS_ECR_LINK }}:latest
          docker push ${{ env.AWS_ECR_LINK }}:latest
      - name: Send Notification on Failure
        if: ${{ failure() }}
        uses: teknatha136/actions-google-chat-text-message@v1.0.0
        with:
          google-chat-webhook: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          text-message: 'Error in Build Docker Image and Push to ECR section in user microservice'

  elastic-beanstalk:
    name: Deploy Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: docker-image-ECR
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      #- name: Generate deployment package                  # Only use if a new version is required
      #  run: zip -r deploy.zip ./Dockerrun.aws.json        # Only use if a new version is required 
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.AWS_APPLICATION_NAME }}
          environment_name: ${{ env.AWS_ENVIROMENT_NAME }}
          version_label: ${{ env.AWS_VERSION_LABEL }}
          region: ${{ env.AWS_REGION }}
      #    deployment_package: deploy.zip                    # Only use if a new version is required
          use_existing_version_if_available: true
      - name: Send Notification on Failure
        if: ${{ failure() }}
        uses: teknatha136/actions-google-chat-text-message@v1.0.0
        with:
          google-chat-webhook: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          text-message: 'Error in Deploy Elastic Beanstalk section in user microservice'

